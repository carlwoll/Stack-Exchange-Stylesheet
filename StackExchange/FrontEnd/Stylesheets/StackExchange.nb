(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     14044,        369]
NotebookOptionsPosition[     11789,        324]
NotebookOutlinePosition[     12182,        341]
CellTagsIndexPosition[     12139,        338]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[StyleData[StyleDefinitions -> "Default.nb"]],

Cell[StyleData["Notebook"],
 ShowCellLabel->False],

Cell[StyleData["Input"],
 ShowCellLabel->True],

Cell[StyleData["Output"],
 ShowCellLabel->True],

Cell[StyleData["Code"],
 StyleKeyMapping->{"Tab" -> "CodeBlock"}],

Cell[StyleData["CodeBlock", StyleDefinitions -> StyleData["Code"]],
 StyleKeyMapping->{"Backspace" -> "Code"},
 InitializationCell->False,
 Background->RGBColor[0.94, 0.94, 0.95]],

Cell[StyleData["CodeBlockOutput", StyleDefinitions -> StyleData["Output"]],
 TextClipboardType->"Package",
 AutoIndent->True,
 AutoSpacing->False,
 Background->RGBColor[0.94, 0.94, 0.95]],

Cell[StyleData["Text"],
 StyleKeyMapping->{"Tab" -> "StackExchangeEdit"}],

Cell[StyleData["StackExchange", StyleDefinitions -> StyleData["Text"]],
 CellEditDuplicate->True,
 StyleKeyMapping->{
  "Tab" -> "StackExchangeHybrid", KeyEvent["Tab", Modifiers -> {Shift}] -> 
   "StackExchangeShowExpression"},
 DefaultDuplicateCellStyle->"StackExchangeEdit",
 ContextMenu->{
   MenuItem["Show String", 
    FrontEndExecute[{
      FrontEndToken["SelectNextCell"], 
      SelectionSetStyle[
       InputNotebook[], "StackExchangeShowExpression"]}]], 
   MenuItem["Mixed Format", 
    FrontEndExecute[{
      FrontEndToken["SelectNextCell"], 
      SelectionSetStyle[
       InputNotebook[], "StackExchangeHybrid"]}]]}],

Cell[StyleData["StackExchangeEdit", StyleDefinitions -> StyleData["Text"]],
 StyleKeyMapping->{
  "Tab" -> "StackExchangeFormat", KeyEvent["Tab", Modifiers -> {Shift}] -> 
   "StackExchangeShowExpression"},
 Evaluatable->True,
 CellProlog:>If[
   Not[
    BooleanQ[StackExchange`StylesheetFunctions`$StackExchangeInitialization]],
    Get["StackExchange`"]; 
   StackExchange`StylesheetFunctions`$StackExchangeInitialization = 
    TrueQ[StackExchange`StylesheetFunctions`$StackExchangeInitialization]],
 CellEpilog:>If[
  StackExchange`StylesheetFunctions`$StackExchangeInitialization, 
   NotebookWrite[
    EvaluationCell[], 
    StackExchange`StylesheetFunctions`setStyle[
     StackExchange`StylesheetFunctions`convertInput[
      StackExchange`StylesheetFunctions`parseInput[
       NotebookRead[
        EvaluationCell[]]]], "StackExchange"], After]],
 CellEvaluationFunction->Function[Null, Null],
 CellFrameMargins->0,
 ContextMenu->{
   MenuItem["Format", 
    FrontEndExecute[{
      FrontEndToken["SelectNextCell"], 
      SelectionSetStyle[
       InputNotebook[], "StackExchangeFormat"]}]], 
   MenuItem["Show String", 
    FrontEndExecute[{
      FrontEndToken["SelectNextCell"], 
      SelectionSetStyle[
       InputNotebook[], "StackExchangeShowExpression"]}]], 
   MenuItem["Mixed Format", 
    FrontEndExecute[{
      FrontEndToken["SelectNextCell"], 
      SelectionSetStyle[
       InputNotebook[], "StackExchangeHybrid"]}]]},
 Background->RGBColor[0.92, 1, 0.92]],

Cell[StyleData["StackExchangeHybrid", StyleDefinitions -> StyleData["Text"]],
 CellDynamicExpression:>
  With[{StackExchange`StylesheetFunctions`Private`cell = NotebookRead[
      EvaluationCell[]]}, If[
     Not[
      BooleanQ[
      StackExchange`StylesheetFunctions`$StackExchangeInitialization]], 
     Get["StackExchange`"]; 
     StackExchange`StylesheetFunctions`$StackExchangeInitialization = 
      TrueQ[StackExchange`StylesheetFunctions`$StackExchangeInitialization]]; 
   If[
     TrueQ[StackExchange`StylesheetFunctions`$StackExchangeInitialization], 
     NotebookWrite[
       EvaluationCell[], 
       Cell[""], All]; NotebookWrite[
       EvaluationNotebook[], 
       StackExchange`StylesheetFunctions`setStyle[
        StackExchange`StylesheetFunctions`toHybrid[
        StackExchange`StylesheetFunctions`Private`cell], "StackExchangeEdit"],
        All]; SelectionMove[
       EvaluationNotebook[], Before, CellContents], NotebookWrite[
       EvaluationCell[], 
       Cell[""], All]; NotebookWrite[
       EvaluationCell[], 
       Replace[StackExchange`StylesheetFunctions`Private`cell, Cell[
          Pattern[StackExchange`StylesheetFunctions`Private`a, 
           Blank[]], 
          Blank[], 
          Pattern[StackExchange`StylesheetFunctions`Private`b, 
           BlankSequence[]]] :> 
        Cell[StackExchange`StylesheetFunctions`Private`a, "StackExchange", 
          CellDynamicExpression :> None, 
          StackExchange`StylesheetFunctions`Private`b]]]]]],

Cell[StyleData["StackExchangeShowExpression", StyleDefinitions -> StyleData[
 "Text"]],
 CellDynamicExpression:>
  With[{StackExchange`StylesheetFunctions`Private`cell = NotebookRead[
      EvaluationCell[]]}, If[
     Not[
      BooleanQ[
      StackExchange`StylesheetFunctions`$StackExchangeInitialization]], 
     Get["StackExchange`"]; 
     StackExchange`StylesheetFunctions`$StackExchangeInitialization = 
      TrueQ[StackExchange`StylesheetFunctions`$StackExchangeInitialization]]; 
   If[
     TrueQ[StackExchange`StylesheetFunctions`$StackExchangeInitialization], 
     NotebookWrite[
       EvaluationCell[], 
       Cell[""], All]; NotebookWrite[
       EvaluationNotebook[], 
       StackExchange`StylesheetFunctions`setStyle[
        StackExchange`StylesheetFunctions`seString[
        StackExchange`StylesheetFunctions`Private`cell], "StackExchangeEdit"],
        All]; SelectionMove[
       EvaluationNotebook[], Before, CellContents], NotebookWrite[
       EvaluationCell[], 
       Cell[""], All]; NotebookWrite[
       EvaluationCell[], 
       Replace[StackExchange`StylesheetFunctions`Private`cell, Cell[
          Pattern[StackExchange`StylesheetFunctions`Private`a, 
           Blank[]], 
          Blank[], 
          Pattern[StackExchange`StylesheetFunctions`Private`b, 
           BlankSequence[]]] :> 
        Cell[StackExchange`StylesheetFunctions`Private`a, "StackExchange", 
          CellDynamicExpression :> None, 
          StackExchange`StylesheetFunctions`Private`b]]]]]],

Cell[StyleData["StackExchangeFormat", StyleDefinitions -> StyleData["Text"]],
 CellDynamicExpression:>
  With[{StackExchange`StylesheetFunctions`Private`cell = NotebookRead[
      EvaluationCell[]]}, If[
     Not[
      BooleanQ[
      StackExchange`StylesheetFunctions`$StackExchangeInitialization]], 
     Get["StackExchange`"]; 
     StackExchange`StylesheetFunctions`$StackExchangeInitialization = 
      TrueQ[StackExchange`StylesheetFunctions`$StackExchangeInitialization]]; 
   If[
     TrueQ[StackExchange`StylesheetFunctions`$StackExchangeInitialization], 
     NotebookWrite[
       EvaluationCell[], 
       Cell[""], All]; NotebookWrite[
       EvaluationNotebook[], 
       StackExchange`StylesheetFunctions`setStyle[
        StackExchange`StylesheetFunctions`convertInput[
         StackExchange`StylesheetFunctions`parseInput[
         StackExchange`StylesheetFunctions`Private`cell]], "StackExchange"], 
       All]; SelectionMove[
       EvaluationNotebook[], Before, CellContents], NotebookWrite[
       EvaluationCell[], 
       Cell[""], All]; NotebookWrite[
       EvaluationCell[], 
       Replace[StackExchange`StylesheetFunctions`Private`cell, Cell[
          Pattern[StackExchange`StylesheetFunctions`Private`a, 
           Blank[]], 
          Blank[], 
          Pattern[StackExchange`StylesheetFunctions`Private`b, 
           BlankSequence[]]] :> 
        Cell[StackExchange`StylesheetFunctions`Private`a, "StackExchange", 
          CellDynamicExpression :> None, 
          StackExchange`StylesheetFunctions`Private`b]]]]]],

Cell[StyleData["HyperlinkTemplate"],
 TemplateBoxOptions->{DisplayFunction->(DynamicBox[
   ToBoxes[
    Hyperlink[#, #2, BaseStyle -> {
       RGBColor[0.64, 0.22, 0.35]}]]]& ),
 Editable->True,
 InterpretationFunction->(Cell[
   TextData[{"[", #, "](", #2, ")"}]]& )}],

Cell[StyleData["SymbolTemplate"],
 TemplateBoxOptions->{DisplayFunction->(StyleBox[
   PaneBox[#, BaselinePosition -> Baseline, 
    BaseStyle -> {Background -> RGBColor[0.94, 0.94, 0.95]}, ImageMargins -> 
    2, FrameMargins -> {{4, 4}, {2, 2}}], "Text", 
   RGBColor[0.64, 0.22, 0.35], ShowStringCharacters -> False]& ),
 Editable->True,
 InterpretationFunction->(Cell[#2]& )}],

Cell[StyleData["CodeTemplate"],
 TemplateBoxOptions->{DisplayFunction->(StyleBox[
   PaneBox[
    TooltipBox[#, #2, TooltipStyle -> {ShowStringCharacters -> True}], 
    BaselinePosition -> Baseline, 
    BaseStyle -> {
     ShowStringCharacters -> True, Background -> RGBColor[0.94, 0.94, 0.95]}, 
    ImageMargins -> 2, FrameMargins -> {{4, 4}, {2, 2}}], "Text", 
   ShowStringCharacters -> False]& ),
 Editable->True,
 InterpretationFunction->(Cell[
   TextData[{"``", 
     Cell[
      BoxData[#2]], "``"}]]& )}],

Cell[StyleData["TeXTemplate"],
 TemplateBoxOptions->{DisplayFunction->(FormBox[
   StyleBox[
    PaneBox[
     TooltipBox[#, #2], BaselinePosition -> Baseline, 
     BaseStyle -> {Background -> RGBColor[1, 1, 0.85, 0.5]}, Alignment -> 
     Center, ImageSize -> Full, FrameMargins -> 20], FontFamily -> "Times", 
    FontSize -> 16, ScriptLevel -> 0, ShowStringCharacters -> False], 
   TraditionalForm]& ),
 Editable->True,
 InterpretationFunction->(Cell[
   TextData[{"$$", #2, "$$"}]]& )}],

Cell[StyleData["InlineTeXTemplate"],
 TemplateBoxOptions->{DisplayFunction->(FormBox[
   StyleBox[
    PaneBox[
     TooltipBox[#, #2], BaselinePosition -> Baseline, 
     BaseStyle -> {Background -> RGBColor[1, 1, 0.85, 0.5]}, ImageMargins -> 
     2, FrameMargins -> {{4, 4}, {2, 2}}], FontFamily -> "Times", FontSize -> 
    16, ScriptLevel -> 0, ShowStringCharacters -> False], TraditionalForm]& ),
 
 Editable->True,
 InterpretationFunction->(Cell[
   TextData[{"$", #2, "$"}]]& )}],

Cell[StyleData["ImageTemplate"],
 TemplateBoxOptions->{DisplayFunction->(#& ),
 InterpretationFunction->(Cell[
   TextData[{"![", #3, "](", #2, ")"}]]& )}],

Cell[StyleData["Quote"],
 CellFrame->{{2, 0}, {0, 0}},
 CellFrameColor->RGBColor[1, 0.92, 0.56],
 Background->RGBColor[1, 0.98, 0.89]],

Cell[StyleData["Comment"],
 CellMargins->{{90, 10}, {10, 5}},
 FontSize->12],

Cell[StyleData["Answer"],
 CellFrame->{{0, 0}, {0, 1}},
 CellDingbat->StyleBox["A", FontSize -> 9],
 ShowGroupOpener->True,
 CellGroupingRules->{"SectionGrouping", 70},
 CellFrameColor->GrayLevel[0.9]],

Cell[StyleData["AnsweredBy", StyleDefinitions -> StyleData["Signature"]],
 CellFrameLabels->{{None, 
    StyleBox["answered", 
     GrayLevel[0.8]]}, {None, None}}],

Cell[StyleData["AskedBy", StyleDefinitions -> StyleData["Signature"]],
 CellFrameLabels->{{None, 
    StyleBox["asked", 
     GrayLevel[0.8]]}, {None, None}}],

Cell[StyleData["EditedBy", StyleDefinitions -> StyleData["Signature"]],
 CellFrameLabels->{{None, 
    StyleBox["edited", 
     GrayLevel[0.8]]}, {None, None}}],

Cell[StyleData["Community", StyleDefinitions -> StyleData["Signature"]],
 CellFrameLabels->{{None, 
    StyleBox["community", 
     GrayLevel[0.8]]}, {None, None}}],

Cell[StyleData["Signature", StyleDefinitions -> StyleData["Text"]],
 TextAlignment->Right,
 ShowStringCharacters->False],

Cell[StyleData["HorizontalLine", StyleDefinitions -> StyleData["Output"]],
 Editable->False,
 Selectable->False,
 CellFrame->{{0, 0}, {0, 1}},
 ShowCellBracket->False,
 CellElementSpacings->{"CellMinHeight"->1},
 CellFrameMargins->0,
 CellFrameColor->GrayLevel[0.9],
 CellSize->{Inherited, 4}]
},
Saveable->True,
WindowSize->{808, 689},
WindowMargins->{{Automatic, 143}, {40, Automatic}},
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (January 4, \
2017)",
StyleDefinitions->"PrivateStylesheetFormatting.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 49, 0, 36, 49, 0, "StyleData", "StyleDefinitions", ""],
Cell[610, 22, 50, 1, 36, 27, 0, "StyleData", "Notebook", "All"],
Cell[663, 25, 46, 1, 44, 24, 0, "StyleData", "Input", "All"],
Cell[712, 28, 47, 1, 44, 25, 0, "StyleData", "Output", "All"],
Cell[762, 31, 65, 1, 64, 23, 0, "StyleData", "Code", "All"],
Cell[830, 34, 179, 3, 64, 67, 0, "StyleData", "CodeBlock", "All"],
Cell[1012, 39, 187, 4, 60, 75, 0, "StyleData", "CodeBlockOutput", "All"],
Cell[1202, 45, 73, 1, 46, 23, 0, "StyleData", "Text", "All"],
Cell[1278, 48, 636, 16, 46, 71, 0, "StyleData", "StackExchange", "All"],
Cell[1917, 66, 1486, 38, 46, 75, 0, "StyleData", "StackExchangeEdit", "All"],
Cell[3406, 106, 1497, 32, 46, 77, 0, "StyleData", "StackExchangeHybrid", \
"All"],
Cell[4906, 140, 1507, 33, 46, 87, 1, "StyleData", \
"StackExchangeShowExpression", "All"],
Cell[6416, 175, 1554, 33, 46, 77, 0, "StyleData", "StackExchangeFormat", \
"All"],
Cell[7973, 210, 270, 7, 36, 36, 0, "StyleData", "HyperlinkTemplate", "All"],
Cell[8246, 219, 380, 7, 36, 33, 0, "StyleData", "SymbolTemplate", "All"],
Cell[8629, 228, 516, 13, 36, 31, 0, "StyleData", "CodeTemplate", "All"],
Cell[9148, 243, 492, 11, 36, 30, 0, "StyleData", "TeXTemplate", "All"],
Cell[9643, 256, 487, 11, 36, 36, 0, "StyleData", "InlineTeXTemplate", "All"],
Cell[10133, 269, 155, 3, 36, 32, 0, "StyleData", "ImageTemplate", "All"],
Cell[10291, 274, 134, 3, 52, 24, 0, "StyleData", "Quote", "All"],
Cell[10428, 279, 76, 2, 43, 26, 0, "StyleData", "Comment", "All"],
Cell[10507, 283, 201, 5, 45, 25, 0, "StyleData", "Answer", "All"],
Cell[10711, 290, 164, 3, 43, 73, 0, "StyleData", "AnsweredBy", "All"],
Cell[10878, 295, 158, 3, 46, 70, 0, "StyleData", "AskedBy", "All"],
Cell[11039, 300, 160, 3, 46, 71, 0, "StyleData", "EditedBy", "All"],
Cell[11202, 305, 164, 3, 46, 72, 0, "StyleData", "Community", "All"],
Cell[11369, 310, 120, 2, 46, 67, 0, "StyleData", "Signature", "All"],
Cell[11492, 314, 293, 8, 20, 74, 0, "StyleData", "HorizontalLine", "All"]
}
]
*)

