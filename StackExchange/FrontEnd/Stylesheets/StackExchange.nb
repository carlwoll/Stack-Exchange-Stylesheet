Notebook[{Cell[StyleData[StyleDefinitions -> "Default.nb"]], 
  Cell[StyleData["Notebook"], ShowCellLabel -> False], 
  Cell[StyleData["Input"], ShowCellLabel -> True], 
  Cell[StyleData["Output"], ShowCellLabel -> True], 
  Cell[StyleData["Code"], StyleKeyMapping -> {"Tab" -> "CodeBlock"}], 
  Cell[StyleData["CodeBlock", StyleDefinitions -> StyleData["Code"]], 
   InitializationCell -> False, 
   StyleKeyMapping -> {"Backspace" -> "Code"}, 
   Background -> RGBColor[0.94, 0.94, 0.95]], 
  Cell[StyleData["CodeBlockOutput", 
    StyleDefinitions -> StyleData["Output"]], 
   TextClipboardType -> "Package", AutoIndent -> True, 
   AutoSpacing -> False, Background -> RGBColor[0.94, 0.94, 0.95]], 
  Cell[StyleData["Text"], 
   StyleKeyMapping -> {"Tab" -> "StackExchangeEdit"}], 
  Cell[StyleData["StackExchange", 
    StyleDefinitions -> StyleData["Text"]], 
   ContextMenu -> {MenuItem["Show String", 
      FrontEndExecute[{FrontEndToken["SelectNextCell"], 
        SelectionSetStyle[InputNotebook[], 
         "StackExchangeShowExpression"]}]], 
     MenuItem["Mixed Format", 
      FrontEndExecute[{FrontEndToken["SelectNextCell"], 
        SelectionSetStyle[InputNotebook[], "StackExchangeHybrid"]}]]},
    StyleKeyMapping -> {"Tab" -> "StackExchangeHybrid", 
     KeyEvent["Tab", Modifiers -> {Shift}] -> 
      "StackExchangeShowExpression"}, CellEditDuplicate -> True, 
   DefaultDuplicateCellStyle -> "StackExchangeEdit"], 
  Cell[StyleData["StackExchangeEdit", 
    StyleDefinitions -> StyleData["Text"]], 
   ContextMenu -> {MenuItem["Format", 
      FrontEndExecute[{FrontEndToken["SelectNextCell"], 
        SelectionSetStyle[InputNotebook[], "StackExchangeFormat"]}]], 
     MenuItem["Show String", 
      FrontEndExecute[{FrontEndToken["SelectNextCell"], 
        SelectionSetStyle[InputNotebook[], 
         "StackExchangeShowExpression"]}]], 
     MenuItem["Mixed Format", 
      FrontEndExecute[{FrontEndToken["SelectNextCell"], 
        SelectionSetStyle[InputNotebook[], "StackExchangeHybrid"]}]]},
    StyleKeyMapping -> {"Tab" -> "StackExchangeFormat", 
     KeyEvent["Tab", Modifiers -> {Shift}] -> 
      "StackExchangeShowExpression"}, CellFrameMargins -> 0, 
   Background -> RGBColor[0.92, 1, 0.92], Evaluatable -> True, 
   CellEvaluationFunction -> Function[Null, Null], 
   CellProlog :> 
    If[! BooleanQ[
       StackExchange`StylesheetFunctions`$StackExchangeInitialization]\
, << "StackExchange`"; 
     StackExchange`StylesheetFunctions`$StackExchangeInitialization = 
      TrueQ[StackExchange`StylesheetFunctions`$\
StackExchangeInitialization]], 
   CellEpilog :> 
    If[StackExchange`StylesheetFunctions`$StackExchangeInitialization,
      NotebookWrite[EvaluationCell[], 
      StackExchange`StylesheetFunctions`setStyle[
       StackExchange`StylesheetFunctions`convertInput[
        StackExchange`StylesheetFunctions`parseInput[
         NotebookRead[EvaluationCell[]]]], "StackExchange"], After]]],
   Cell[StyleData["StackExchangeHybrid", 
    StyleDefinitions -> StyleData["Text"]], 
   CellDynamicExpression :> 
    With[{StackExchange`StylesheetFunctions`Private`cell = 
       NotebookRead[EvaluationCell[]]}, 
     If[! BooleanQ[
        StackExchange`StylesheetFunctions`$\
StackExchangeInitialization], << "StackExchange`"; 
      StackExchange`StylesheetFunctions`$StackExchangeInitialization =
        TrueQ[StackExchange`StylesheetFunctions`$\
StackExchangeInitialization]]; 
     If[TrueQ[
       StackExchange`StylesheetFunctions`$StackExchangeInitialization]\
, NotebookWrite[EvaluationCell[], Cell[""], All]; 
      NotebookWrite[EvaluationNotebook[], 
       StackExchange`StylesheetFunctions`setStyle[
        StackExchange`StylesheetFunctions`toHybrid[
         StackExchange`StylesheetFunctions`Private`cell], 
        "StackExchangeEdit"], All]; 
      SelectionMove[EvaluationNotebook[], Before, CellContents], 
      NotebookWrite[EvaluationCell[], Cell[""], All]; 
      NotebookWrite[EvaluationCell[], 
       Replace[StackExchange`StylesheetFunctions`Private`cell, 
        Cell[StackExchange`StylesheetFunctions`Private`a_, _, 
          StackExchange`StylesheetFunctions`Private`b__] :> 
         Cell[StackExchange`StylesheetFunctions`Private`a, 
          "StackExchange", CellDynamicExpression :> None, 
          StackExchange`StylesheetFunctions`Private`b]]]]]], 
  Cell[StyleData["StackExchangeShowExpression", 
    StyleDefinitions -> StyleData["Text"]], 
   CellDynamicExpression :> 
    With[{StackExchange`StylesheetFunctions`Private`cell = 
       NotebookRead[EvaluationCell[]]}, 
     If[! BooleanQ[
        StackExchange`StylesheetFunctions`$\
StackExchangeInitialization], << "StackExchange`"; 
      StackExchange`StylesheetFunctions`$StackExchangeInitialization =
        TrueQ[StackExchange`StylesheetFunctions`$\
StackExchangeInitialization]]; 
     If[TrueQ[
       StackExchange`StylesheetFunctions`$StackExchangeInitialization]\
, NotebookWrite[EvaluationCell[], Cell[""], All]; 
      NotebookWrite[EvaluationNotebook[], 
       StackExchange`StylesheetFunctions`setStyle[
        StackExchange`StylesheetFunctions`seString[
         StackExchange`StylesheetFunctions`Private`cell], 
        "StackExchangeEdit"], All]; 
      SelectionMove[EvaluationNotebook[], Before, CellContents], 
      NotebookWrite[EvaluationCell[], Cell[""], All]; 
      NotebookWrite[EvaluationCell[], 
       Replace[StackExchange`StylesheetFunctions`Private`cell, 
        Cell[StackExchange`StylesheetFunctions`Private`a_, _, 
          StackExchange`StylesheetFunctions`Private`b__] :> 
         Cell[StackExchange`StylesheetFunctions`Private`a, 
          "StackExchange", CellDynamicExpression :> None, 
          StackExchange`StylesheetFunctions`Private`b]]]]]], 
  Cell[StyleData["StackExchangeFormat", 
    StyleDefinitions -> StyleData["Text"]], 
   CellDynamicExpression :> 
    With[{StackExchange`StylesheetFunctions`Private`cell = 
       NotebookRead[EvaluationCell[]]}, 
     If[! BooleanQ[
        StackExchange`StylesheetFunctions`$\
StackExchangeInitialization], << "StackExchange`"; 
      StackExchange`StylesheetFunctions`$StackExchangeInitialization =
        TrueQ[StackExchange`StylesheetFunctions`$\
StackExchangeInitialization]]; 
     If[TrueQ[
       StackExchange`StylesheetFunctions`$StackExchangeInitialization]\
, NotebookWrite[EvaluationCell[], Cell[""], All]; 
      NotebookWrite[EvaluationNotebook[], 
       StackExchange`StylesheetFunctions`setStyle[
        StackExchange`StylesheetFunctions`convertInput[
         StackExchange`StylesheetFunctions`parseInput[
          StackExchange`StylesheetFunctions`Private`cell]], 
        "StackExchange"], All]; 
      SelectionMove[EvaluationNotebook[], Before, CellContents], 
      NotebookWrite[EvaluationCell[], Cell[""], All]; 
      NotebookWrite[EvaluationCell[], 
       Replace[StackExchange`StylesheetFunctions`Private`cell, 
        Cell[StackExchange`StylesheetFunctions`Private`a_, _, 
          StackExchange`StylesheetFunctions`Private`b__] :> 
         Cell[StackExchange`StylesheetFunctions`Private`a, 
          "StackExchange", CellDynamicExpression :> None, 
          StackExchange`StylesheetFunctions`Private`b]]]]]], 
  Cell[StyleData["HyperlinkTemplate"], 
   TemplateBoxOptions -> {Editable -> True, 
     DisplayFunction -> (DynamicBox[
         ToBoxes[Hyperlink[#1, #2, 
           BaseStyle -> {RGBColor[0.64, 0.22, 0.35]}]]] &), 
     InterpretationFunction -> (Cell[
         TextData[{"[", #1, "](", #2, ")"}]] &)}], 
  Cell[StyleData["SymbolTemplate"], 
   TemplateBoxOptions -> {Editable -> True, 
     DisplayFunction -> (StyleBox[
         PaneBox[#1, BaselinePosition -> Baseline, 
          BaseStyle -> {Background -> RGBColor[0.94, 0.94, 0.95]}, 
          ImageMargins -> 2, FrameMargins -> {{4, 4}, {2, 2}}], 
         "Text", RGBColor[0.64, 0.22, 0.35], 
         ShowStringCharacters -> False] &), 
     InterpretationFunction -> (Cell[#2] &)}], 
  Cell[StyleData["CodeTemplate"], 
   TemplateBoxOptions -> {Editable -> True, 
     DisplayFunction -> (StyleBox[
         PaneBox[TooltipBox[#1, #2, 
           TooltipStyle -> {ShowStringCharacters -> True}], 
          BaselinePosition -> Baseline, 
          BaseStyle -> {ShowStringCharacters -> True, 
            Background -> RGBColor[0.94, 0.94, 0.95]}, 
          ImageMargins -> 2, FrameMargins -> {{4, 4}, {2, 2}}], 
         "Text", ShowStringCharacters -> False] &), 
     InterpretationFunction -> (Cell[
         TextData[{"``", Cell[BoxData[#2]], "``"}]] &)}], 
  Cell[StyleData["TeXTemplate"], 
   TemplateBoxOptions -> {Editable -> True, 
     DisplayFunction -> (FormBox[
         StyleBox[
          PaneBox[TooltipBox[#1, #2], BaselinePosition -> Baseline, 
           BaseStyle -> {Background -> RGBColor[1, 1, 0.85, 0.5]}, 
           Alignment -> Center, ImageSize -> Full, 
           FrameMargins -> 20], FontFamily -> "Times", FontSize -> 16,
           ScriptLevel -> 0, ShowStringCharacters -> False], 
         TraditionalForm] &), 
     InterpretationFunction -> (Cell[TextData[{"$$", #2, "$$"}]] &)}],
   Cell[StyleData["InlineTeXTemplate"], 
   TemplateBoxOptions -> {Editable -> True, 
     DisplayFunction -> (FormBox[
         StyleBox[
          PaneBox[TooltipBox[#1, #2], BaselinePosition -> Baseline, 
           BaseStyle -> {Background -> RGBColor[1, 1, 0.85, 0.5]}, 
           ImageMargins -> 2, FrameMargins -> {{4, 4}, {2, 2}}], 
          FontFamily -> "Times", FontSize -> 16, ScriptLevel -> 0, 
          ShowStringCharacters -> False], TraditionalForm] &), 
     InterpretationFunction -> (Cell[TextData[{"$", #2, "$"}]] &)}], 
  Cell[StyleData["Quote"], Background -> RGBColor[1, 0.98, 0.89], 
   CellFrame -> {{2, 0}, {0, 0}}, 
   CellFrameColor -> RGBColor[1, 0.92, 0.56]], 
  Cell[StyleData["Comment"], CellMargins -> {{90, 10}, {10, 5}}, 
   FontSize -> 12], 
  Cell[StyleData["Answer"], 
   CellGroupingRules -> {"SectionGrouping", 70}, 
   CellDingbat -> StyleBox["A", FontSize -> 9], 
   ShowGroupOpener -> True, CellFrame -> {{0, 0}, {0, 1}}, 
   CellFrameColor -> GrayLevel[0.9]], 
  Cell[StyleData["AnsweredBy", 
    StyleDefinitions -> StyleData["Signature"]], 
   CellFrameLabels -> {{None, 
      StyleBox["answered", GrayLevel[0.8]]}, {None, None}}], 
  Cell[StyleData["AskedBy", 
    StyleDefinitions -> StyleData["Signature"]], 
   CellFrameLabels -> {{None, 
      StyleBox["asked", GrayLevel[0.8]]}, {None, None}}], 
  Cell[StyleData["EditedBy", 
    StyleDefinitions -> StyleData["Signature"]], 
   CellFrameLabels -> {{None, 
      StyleBox["edited", GrayLevel[0.8]]}, {None, None}}], 
  Cell[StyleData["Community", 
    StyleDefinitions -> StyleData["Signature"]], 
   CellFrameLabels -> {{None, 
      StyleBox["community", GrayLevel[0.8]]}, {None, None}}], 
  Cell[StyleData["Signature", StyleDefinitions -> StyleData["Text"]], 
   TextAlignment -> Right, ShowStringCharacters -> False], 
  Cell[StyleData["HorizontalLine", 
    StyleDefinitions -> StyleData["Output"]], Editable -> False, 
   Selectable -> False, CellFrame -> {{0, 0}, {0, 1}}, 
   ShowCellBracket -> False, 
   CellElementSpacings -> {"CellMinHeight" -> 1}, 
   CellFrameMargins -> 0, CellFrameColor -> GrayLevel[0.9], 
   CellSize -> {Inherited, 4}]}, Saveable -> False, 
 WindowSize -> {808, 689}, 
 WindowMargins -> {{Automatic, 143}, {40, Automatic}}, 
 FrontEndVersion -> 
  "10.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 10, 2015)",
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
